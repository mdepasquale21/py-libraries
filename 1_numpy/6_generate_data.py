# GENERATE DATA
print('GENERATE DATA')
print('Generating data with large sizes is necessary in some cases')
print('E.g. If you need to initialize random matrices for weights and biases of a Neural Network')
print('or generate synthetic data to test a Machine Learning algorithm')

import numpy as np

print('\n')
print('Examples with numpy')
print('1) np.zeros((n_rows, n_cols)) -> MATRIX OF ALL 0s')
print('np.zeros((2,3))')
print('   |')
print('   V')
print(np.zeros((2,3)))

print('2) np.ones((n_rows, n_cols)) -> MATRIX OF ALL 1s')
print('np.ones((2,3))')
print('   |')
print('   V')
print(np.ones((2,3)))

print('3) N * np.ones((n_rows, n_cols)) -> MATRIX OF ALL Ns')
print('10 * np.ones((2,3))')
print('   |')
print('   V')
print(10*np.ones((2,3)))

print('4) n.eye(n_rows) -> DIAGONAL MATRIX')
print('np.eye(3)')
print('   |')
print('   V')
print(np.eye(3))

print('\n')
print('Array with random numbers with np.random module')
print('np.random.random() returns a random float number in the interval [0.0, 1.0) with uniform distribution')
print('To draw from an interval [a, b) just do (b-a)*np.random.random()+a')
print('E.g. random number between 100 and 200')
print(100.0*np.random.random()+100.0)
print('You can pass a tuple with (n_rows, n_cols) to np.random.random() and have an array of the given shape with random numbers')
print('E.g. np.random.random((2,3)) -> 2x3 matrix between 0 and 1')
print('   |')
print('   V')
print(np.random.random((2,3)))
print('E.g.100 * np.random.random((2,3)) -> 2x3 matrix between 0 and 100')
print('   |')
print('   V')
print(100*np.random.random((2,3)))
print('E.g.100 * np.random.random((2,3)) + 100 -> 2x3 matrix between 100 and 200')
print('   |')
print('   V')
print(100*np.random.random((2,3))+100)
print('E.g.1000 * np.random.random((2,3)) - 500 -> 2x3 matrix between -500 and 500')
print('   |')
print('   V')
print(1000*np.random.random((2,3))-500)

print('NORMAL DISTRIBUTION')
print('If you want to draw numbers from a normal distribution you should use np.random.randn()')
